[tool.poetry]
name = "python-discord-llm-bot"
version = "0.1.0"
description = "A discord bot made for Hacker/Maker spaces so that they can be assisted by a locally running LLM on discord."
authors = ["Francis Duvivier <francisduvivier@gmail.com>"]
license = "LICENSE"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
discord = "^2.3.2"
python-dotenv = "^1.0.0"
langchain = "^0.0.330"
pytest-cov = "^4.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
minversion = "7.3"
testpaths = "tests"

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "setup.py",
    "discordbot/__init__.py",
    "discordbot/version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.paths]
source = [
    "discordbot/*",
]

[tool.coverage.html]
directory = "reports"

######## Tools
[tool.black]
target-version = ['py39']
line-length = 80
skip-string-normalization = false
skip-magic-trailing-comma = false
extend-exclude = '''
/(
  | docs
  | setup.py
)/
'''

[tool.isort]
py_version = 311
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
default_section = "FIRSTPARTY"
known_third_party = [
    "numpy",
    "pandas",
    "keras",
    "tensorflow",
    "sklearn",
    "matplotlib",
    "scipy",
    "h5py",
    "seaborn",
    "numba",
    "gym",
    "PyQt6",
    "PyQt5",
    "pyqtgraph",
    "torch",
    "tqdm"
]
known_first_party = []
known_local_folder = []
multi_line_output = 3
lines_after_imports = 2
force_single_line = true
use_parentheses = true
ensure_newline_before_comments = true
line_length = 80
include_trailing_comma = true
skip_glob = [
  "docs/*",
  "setup.py"
]

[tool.mypy]
# Platform configuration
python_version = "3.11"
# imports related
ignore_missing_imports = true
follow_imports = "silent"
# None and Optional handling
no_implicit_optional = true
strict_optional = true
# Configuring warnings
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_return_any = false
# Untyped definitions and calls
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
# Disallow dynamic typing
disallow_subclassing_any = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
# Miscellaneous strictness flags
allow_untyped_globals = true
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
# Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true

[tool.ruff]
target-version = "py39"
select = ["F", "E"]
extend-select = ["W", "N", "UP", "B", "A", "C4", "PT", "SIM", "PD", "PLE", "RUF"]
ignore = ["SIM300"]
fixable = ["F", "E", "W", "UP", "B", "A", "C4"]
unfixable = []
line-length = 80
extend-exclude = ["tests", "test"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
[tool.ruff.isort]
force-single-line = true
force-sort-within-sections = false
lines-after-imports = 2
[tool.ruff.mccabe]
max-complexity = 10
[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
[tool.ruff.pydocstyle]
convention = "numpy"
[tool.ruff.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false
